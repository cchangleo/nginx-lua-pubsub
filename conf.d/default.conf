init_by_lua_block {
  require "cjson"
}

# Set to Google DNS servers
# resolver                            8.8.8.8 8.8.4.4 valid=300s ipv6=off;
resolver_timeout                    1s;

proxy_cache_path                    /var/cache/nginx/storage levels=1:2 keys_zone=storage:128m max_size=64G;
proxy_cache_path                    /var/cache/nginx/authorization levels=1:2 keys_zone=authorization:1m max_size=8m;

upstream storage {
  server                            www.googleapis.com:443;
  keepalive                         16;
  # keepalive_requests                1000;
}

upstream metadata {
  server                            metadata.google.internal;
  keepalive                         1;
}

upstream authorization {
  server                            unix:/var/run/nginx-authorization.sock;
}

map "$upstream_http_content_type:$uri" $content_type_override {
  default                                   $upstream_http_content_type;
  "~*application/octet-stream:.*\.mpd$"     "application/dash+xml";
  "~*application/octet-stream:.*\.m3u8$"    "application/vnd.apple.mpegURL";
  "~*application/octet-stream:.*\.m4s$"     "video/mp4";
  "~*application/octet-stream:.*\.plist$"   "application/xml";
}

server {
  listen                            unix:/var/run/nginx-authorization.sock;

  location = /metadata {
    proxy_pass                      http://metadata/computeMetadata/v1/instance/service-accounts/default/token;
    proxy_set_header                Metadata-Flavor Google;
    proxy_pass_request_headers      off;
    proxy_pass_request_body         off;
  }

  location / {
    content_by_lua_block {
      local res = ngx.location.capture("/metadata", { method = ngx.HTTP_GET });
      local data = res.body;
      local token = require("cjson").decode(data);

      local max_age = math.max(0, (token.expires_in - 60));
      ngx.header["Authorization"] = token.token_type .. " " .. token.access_token;
      ngx.header["Cache-Control"] = "public, must-revalidate, max-age=" .. max_age;
      ngx.header["Expires"] = ngx.http_time(ngx.time() + max_age);

      ngx.header["Content-Type"] = "application/json";
      ngx.say(data);
    }
  }
}

server {
  listen                    80 deferred;

  include                   mime.types;
  default_type              application/octet-stream;

  sendfile                  on;
  tcp_nopush                on;
  tcp_nodelay               on;
  aio                       threads;

  # Support only HEAD, GET
  if ( $request_method !~ "GET|HEAD" ) {
      return 405;
  }

  # Default to 404
  location / {
    return 404;
  }

  location @error401 {
    default_type "";
    return 401;
  }

  location @error403 {
    default_type "";
    return 403;
  }

  location @error404 {
    default_type "";
    return 404;
  }

  location = /authorize {
    internal;
    proxy_pass                      http://authorization;

    # Cache authorization token
    proxy_cache                     authorization;
    proxy_cache_background_update   on;
    proxy_cache_use_stale           error timeout updating http_500 http_502 http_503 http_504 http_429;
    proxy_cache_lock                on;
    proxy_cache_lock_age            60s;
    proxy_cache_lock_timeout        1s;
  }

  ## for test encode 
  location /track {
    auth_request                    /authorize;
    auth_request_set                $authorization $upstream_http_authorization;

    access_by_lua '
      
      local cjson = require "cjson"
      local b="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"

      -- read out orinal body before writing new body
      ngx.req.read_body()

      -- get data param from uri
      local data = ngx.var.arg_data

      -- 1. base64 decode
      data = string.gsub(data, "[^"..b.."=]", "")
      local b_decoded = (data:gsub(".", function(x)
            if (x == "=") then return "" end
            local r,f="",(b:find(x)-1)
            for i=6,1,-1 do r=r..(f%2^i-f%2^(i-1)>0 and "1" or "0") end
            return r;
        end):gsub("%d%d%d?%d?%d?%d?%d?%d?", function(x)
            if (#x ~= 8) then return "" end
            local c=0
            for i=1,8 do c=c+(x:sub(i,i)=="1" and 2^(8-i) or 0) end
                return string.char(c)
        end))
      
      -- 2. json decode
      local j_decoded = cjson.decode(b_decoded)

      -- 3. json encode
      local j_encoded = cjson.encode(j_decoded)

      -- 4. base64 encode
      local data = j_encoded
      local b_encoded = ((data:gsub(".", function(x) 
            local r,b="",x:byte()
            for i=8,1,-1 do r=r..(b%2^i-b%2^(i-1)>0 and "1" or "0") end
            return r;
        end).."0000"):gsub("%d%d%d?%d?%d?%d?", function(x)
            if (#x < 6) then return "" end
            local c=0
            for i=1,6 do c=c+(x:sub(i,i)=="1" and 2^(6-i) or 0) end
            return b:sub(c+1,c+1)
        end)..({ "", "==", "=" })[#data%3+1])
     
      -- 5. insert the encoded string to the param template
      local param = cjson.encode({
        messages = setmetatable({{data=b_encoded}}, cjson.array_mt)
      });
      
      -- set body param
      ngx.req.set_body_data(param)
      
      -- remove original uri arguments
      ngx.req.set_uri_args({})
    ';
 
    proxy_pass                      https://pubsub.googleapis.com/v1/projects/skilled-axis-265303/topics/testpubsub:publish;
    proxy_method POST;
    proxy_set_header                Authorization $authorization;

  }
  #######################

  location ~* '^/(?<bucket>[0-9a-z\-\_\.]+)/(?<object_id>.+)$' {
    auth_request                    /authorize;
    auth_request_set                $authorization $upstream_http_authorization;

    # NOTE: object_id needs to be escaped
    set_by_lua_block $object_id_escaped {
      return ngx.escape_uri(ngx.var.object_id);
    }

    # GET http://storage.google-cloud.svc.cluster.local/eu.uploads.xxx.live/my/file.mp4
    # GET https://www.googleapis.com/download/storage/v1/b/eu.uploads.xxx.live/o/my/file.mp4?alt=media;
    proxy_pass                      https://storage/download/storage/v1/b/$bucket/o/$object_id_escaped?alt=media;
    proxy_set_header                Host www.googleapis.com;
    proxy_set_header                Authorization $authorization;
    # Support only HEAD, GET requests
    proxy_pass_request_body         off;
    proxy_set_header                Content-Length "";

    # Enable persistent upstream connections
    proxy_http_version              1.1;
    proxy_set_header                Connection "";

    # proxy_set_header              Accept-Encoding "";

    # Hide proxy response headers
    proxy_hide_header               vary;
    proxy_hide_header               alt-svc;
    proxy_hide_header               alternate-protocol;
    proxy_hide_header               connection;
    # proxy_hide_header               x-xss-protection;
    # proxy_hide_header               accept-ranges;
    proxy_hide_header               set-cookie;
    proxy_hide_header               content-disposition;
    proxy_hide_header               x-guploader-uploadid;
    proxy_hide_header               x-goog-hash;
    proxy_hide_header               x-goog-metageneration;
    proxy_hide_header               x-goog-generation;
    proxy_hide_header               x-goog-storage-class;
    proxy_hide_header               access-control-allow-credentials;
    proxy_hide_header               access-control-allow-origin;
    proxy_hide_header               access-control-expose-headers;
    proxy_hide_header               expires;
    proxy_hide_header               cache-control;
    proxy_hide_header               pragma;
    proxy_hide_header               content-type;
    add_header                      Content-Type $content_type_override;

    # proxy_hide_header               x-goog-stored-content-encoding;
    # proxy_hide_header               x-goog-stored-content-length;
    proxy_hide_header               WWW-Authenticate;   # TODO: This doesn't work

    # Enable proxy caching
    # proxy_buffering                 off;
    proxy_cache                     storage;
    proxy_cache_key                 $bucket$object_id$slice_range;
    proxy_cache_valid               200 5s;
    proxy_cache_valid               404 5s;
    proxy_cache_valid               any 1s;
    proxy_cache_use_stale           updating;
    proxy_cache_background_update   on;
    proxy_cache_lock                on;
    proxy_cache_lock_age            1s;
    proxy_cache_lock_timeout        1s;

    slice                           5m;
    proxy_set_header                Range $slice_range;
    proxy_cache_valid               206 1h;

    # TLS settings
    proxy_ssl_protocols             TLSv1.2;
    proxy_ssl_ciphers               ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:AES256-GCM-SHA384;
    # proxy_ssl_trusted_certificate   /etc/ssl/cert.pem;
    # proxy_ssl_verify                on;

    # Custom error pages
    # proxy_intercept_errors          on;
    # error_page                      401 =401 @error401;
    # error_page                      403 =403 @error403;
    # error_page                      404 =404 @error404;
  }
}
