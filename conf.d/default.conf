init_by_lua_block {
  require "cjson"
}

# Set to Google DNS servers
# resolver                            8.8.8.8 8.8.4.4 valid=300s ipv6=off;
resolver_timeout                    1s;

proxy_cache_path                    /var/cache/nginx/storage levels=1:2 keys_zone=storage:128m max_size=64G;
proxy_cache_path                    /var/cache/nginx/authorization levels=1:2 keys_zone=authorization:1m max_size=8m;

upstream storage {
  server                            www.googleapis.com:443;
  keepalive                         16;
  # keepalive_requests                1000;
}

upstream metadata {
  server                            metadata.google.internal;
  keepalive                         1;
}

upstream authorization {
  server                            unix:/var/run/nginx-authorization.sock;
}

server {
  listen                            unix:/var/run/nginx-authorization.sock;

  location = /metadata {
    proxy_pass                      http://metadata/computeMetadata/v1/instance/service-accounts/default/token;
    proxy_set_header                Metadata-Flavor Google;
    proxy_pass_request_headers      off;
    proxy_pass_request_body         off;
  }

  location / {
    content_by_lua_block {
      local res = ngx.location.capture("/metadata", { method = ngx.HTTP_GET });
      local data = res.body;
      local token = require("cjson").decode(data);

      local max_age = math.max(0, (token.expires_in - 60));
      ngx.header["Authorization"] = token.token_type .. " " .. token.access_token;
      ngx.header["Cache-Control"] = "public, must-revalidate, max-age=" .. max_age;
      ngx.header["Expires"] = ngx.http_time(ngx.time() + max_age);

      ngx.header["Content-Type"] = "application/json";
      ngx.say(data);
    }
  }
}

server {
  listen                    80 deferred;

  include                   mime.types;
  default_type              application/octet-stream;

  sendfile                  on;
  tcp_nopush                on;
  tcp_nodelay               on;
  aio                       threads;

  location = /authorize {
    internal;
    proxy_pass                      http://authorization;

    # Cache authorization token
    proxy_cache                     authorization;
    proxy_cache_background_update   on;
    proxy_cache_use_stale           error timeout updating http_500 http_502 http_503 http_504 http_429;
    proxy_cache_lock                on;
    proxy_cache_lock_age            60s;
    proxy_cache_lock_timeout        1s;
  }


  location /pubsub {

    proxy_pass                      https://pubsub.googleapis.com/v1/projects/skilled-axis-265303/topics/testpubsub:publish;

    proxy_set_header                Authorization $authorization;
    proxy_set_header                Host  pubsub.googleapis.com;
  }

  location /track {
    
    auth_request                    /authorize;
    auth_request_set                $authorization $upstream_http_authorization;
    
    content_by_lua_block {
      
      local cjson = require "cjson"
      
      local data = ngx.var.arg_data

      ngx.req.read_body()

      local param = cjson.encode({
        messages = setmetatable({{data=data}}, cjson.array_mt)
      })
      
      local res = ngx.location.capture("/pubsub", { 
        method = ngx.HTTP_POST,
        body = param,
        copy_all_vars = true
      })
      local res_body = res.body
      ngx.say(res_body)
    }
  }

}
