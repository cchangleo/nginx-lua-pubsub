lua_shared_dict pubsub 1m;
init_by_lua_block {
  require "cjson";
  local pubsub = ngx.shared.pubsub;
  pubsub:set("GCLOUD_PROJCT_NAME", os.getenv("GCLOUD_PROJCT_NAME"))
  pubsub:set("GCLOUD_TOPIC_NAME", os.getenv("GCLOUD_TOPIC_NAME"))
}

# Set to Google DNS servers
resolver                            8.8.8.8 8.8.4.4 valid=300s ipv6=off;
resolver_timeout                    1s;

proxy_cache_path                    /var/cache/nginx/storage levels=1:2 keys_zone=storage:128m max_size=64G;
proxy_cache_path                    /var/cache/nginx/authorization levels=1:2 keys_zone=authorization:1m max_size=8m;

upstream pubsub {
  server                            pubsub.googleapis.com:443;
  keepalive                         16;
  # keepalive_requests                1000;
}

upstream metadata {
  server                            metadata.google.internal;
  keepalive                         1;
}

upstream authorization {
  server                            unix:/var/run/nginx-authorization.sock;
}


server {
  listen                            unix:/var/run/nginx-authorization.sock;

  location = /metadata {
    proxy_pass                      http://metadata/computeMetadata/v1/instance/service-accounts/default/token;
    proxy_set_header                Metadata-Flavor Google;
    proxy_pass_request_headers      off;
    proxy_pass_request_body         off;
  }

  location / {
    content_by_lua_block {
      local res = ngx.location.capture("/metadata", { method = ngx.HTTP_GET });
      local data = res.body;
      local token = require("cjson").decode(data);

      local max_age = math.max(0, (token.expires_in - 60));
      ngx.header["Authorization"] = token.token_type .. " " .. token.access_token;
      ngx.header["Cache-Control"] = "public, must-revalidate, max-age=" .. max_age;
      ngx.header["Expires"] = ngx.http_time(ngx.time() + max_age);

      ngx.header["Content-Type"] = "application/json";
      ngx.say(data);
    }
  }
}

server {
  listen                    80 deferred;

  include                   mime.types;
  default_type              application/octet-stream;

  sendfile                  on;
  tcp_nopush                on;
  tcp_nodelay               on;
  aio                       threads;


  location = /authorize {
    internal;
    proxy_pass                      http://authorization;

    # Cache authorization token
    proxy_cache                     authorization;
    proxy_cache_background_update   on;
    proxy_cache_use_stale           error timeout updating http_500 http_502 http_503 http_504 http_429;
    proxy_cache_lock                on;
    proxy_cache_lock_age            60s;
    proxy_cache_lock_timeout        1s;
  }


  location /pubsub {
    set_by_lua $GCLOUD_PROJCT_NAME 'return ngx.shared.pubsub:get("GCLOUD_PROJCT_NAME")';
    set_by_lua $GCLOUD_TOPIC_NAME 'return ngx.shared.pubsub:get("GCLOUD_TOPIC_NAME")';

    proxy_pass                      https://pubsub/v1/projects/$GCLOUD_PROJCT_NAME/topics/$GCLOUD_TOPIC_NAME:publish;
    proxy_set_header                Authorization $authorization;
    proxy_set_header                Host  pubsub.googleapis.com;

  }

  location /track {
    auth_request                    /authorize;
    auth_request_set                $authorization $upstream_http_authorization;

    content_by_lua_block {
 
      local cjson = require "cjson"

      -- read out orinal body before writing new body
      ngx.req.read_body()
      
      -- get data param from uri
      local data = ngx.var.arg_data

      -- 1. base64 decode
      local b_decoded = ngx.decode_base64(data)

      -- 2. json decode
      local j_decoded = cjson.decode(b_decoded)
     
      -- 3. insert the encoded string to the param format
      local param = cjson.encode({
        messages = setmetatable({{data=data}}, cjson.array_mt)
      })
      -- 4. post to pubsub
      local res = ngx.location.capture("/pubsub", { 
        method = ngx.HTTP_POST,
        body = param,
        copy_all_vars = true
      })
      local res_body = res.body
      ngx.say(res_body)
      
    }
    body_filter_by_lua '
      -- hide response if need 
      ngx.arg[1]=nil
    ';        
  }
}
